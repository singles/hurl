Hurl, run and test HTTP requests with plain text

Usage: hurl~~~ [OPTIONS] [FILES]...

Arguments:
  [FILES]...  Set the input file to use

Options:
      --aws-sigv4 <PROVIDER1[:PROVIDER2[:REGION[:SERVICE]]]>
          Use AWS V4 signature authentication in the transfer
      --cacert <FILE>
          CA certificate to verify peer against (PEM format)
  -E, --cert <CERTIFICATE[:PASSWORD]>
          Client certificate file and password
      --key <KEY>
          Private key file name
      --color
          Colorize output
      --compressed
          Request compressed response (using deflate or gzip)
      --connect-timeout <SECONDS>
          Maximum time allowed for connection [default: 300]
      --connect-to <HOST1:PORT1:HOST2:PORT2>
          For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead
      --continue-on-error
          Continue executing requests even if an error occurs
  -b, --cookie <FILE>
          Read cookies from FILE
  -c, --cookie-jar <FILE>
          Write cookies to FILE after running the session (only for one session)
      --delay <MILLISECONDS>
          Sets delay before each request. [default: 0]
      --error-format <FORMAT>
          Control the format of error messages [default: short] [possible values: short, long]
      --file-root <DIR>
          Set root filesystem to import files [default: current directory]
  -L, --location
          Follow redirects
      --glob <GLOB>
          Specify input files that match the given GLOB. Multiple glob flags may be used
  -0, --http1.0
          Tell Hurl to use HTTP version 1.0
      --http1.1
          Tell Hurl to use HTTP version 1.1
      --http2
          Tell Hurl to use HTTP version 2
      --http3
          Tell Hurl to use HTTP version 3
      --ignore-asserts
          Ignore asserts defined in the Hurl file
  -i, --include
          Include the HTTP headers in the output
  -k, --insecure
          Allow insecure SSL connections
      --interactive
          Turn on interactive mode
  -4, --ipv4
          Tell Hurl to use IPv4 addresses only when resolving host names, and not for example try
          IPv6
  -6, --ipv6
          Tell Hurl to use IPv6 addresses only when resolving host names, and not for example try
          IPv4
      --json
          Output each Hurl file result to JSON
      --max-redirs <NUM>
          Maximum number of redirects allowed, -1 for unlimited redirects [default: 50]
  -m, --max-time <SECONDS>
          Maximum time allowed for the transfer [default: 300]
      --no-color
          Do not colorize output
      --no-output
          Suppress output. By default, Hurl outputs the body of the last response
      --noproxy <HOST(S)>
          List of hosts which do not use proxy
  -o, --output <FILE>
          Write to FILE instead of stdout
      --path-as-is
          Tell Hurl to not handle sequences of /../ or /./ in the given URL path
  -x, --proxy <[PROTOCOL://]HOST[:PORT]>
          Use proxy on given PROTOCOL/HOST/PORT
      --report-html <DIR>
          Generate HTML report to DIR
      --report-junit <FILE>
          Write a JUnit XML report to FILE
      --report-tap <FILE>
          Write a TAP report to FILE
      --resolve <HOST:PORT:ADDR>
          Provide a custom address for a specific HOST and PORT pair
      --retry <NUM>
          Maximum number of retries, 0 for no retries, -1 for unlimited retries [default: 0]
      --retry-interval <MILLISECONDS>
          Interval in milliseconds before a retry [default: 1000]
      --ssl-no-revoke
          (Windows) Tell Hurl to disable certificate revocation checks. WARNING: this option loosens
          the SSL security, and by using this flag you ask for exactly that.
      --test
          Activate test mode
      --to-entry <ENTRY_NUMBER>
          Execute Hurl file to ENTRY_NUMBER (starting at 1)
  -A, --user-agent <NAME>
          Specify the User-Agent string to send to the HTTP server
  -u, --user <USER:PASSWORD>
          Add basic Authentication header to each request
      --variable <NAME=VALUE>
          Define a variable
      --variables-file <FILE>
          Define a properties file in which you define your variables
      --verbose
          Turn on verbose
      --very-verbose
          Turn on verbose output, including HTTP response and libcurl logs
  -h, --help
          Print help
  -V, --version
          Print version
